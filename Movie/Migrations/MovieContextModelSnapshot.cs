// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MovieAPI.Models;

#nullable disable

namespace MovieAPI.Migrations
{
    [DbContext(typeof(MovieContext))]
    partial class MovieContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("MovieAPI.Models.Movie", b =>
                {
                    b.Property<int>("MovieID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MovieID"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Director")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Genre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IMDBtitleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Poster")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Rating")
                        .HasColumnType("float");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MovieID");

                    b.ToTable("Movies");

                    b.HasData(
                        new
                        {
                            MovieID = 1,
                            Description = "short description about the movie",
                            Director = "Some director",
                            Genre = "ACtion",
                            IMDBtitleId = "qwe123",
                            Title = "Movie1"
                        },
                        new
                        {
                            MovieID = 2,
                            Description = "short description about the movie",
                            Director = "Wachewski brothers",
                            Genre = "ACtion",
                            IMDBtitleId = "asd321",
                            Title = "Matrix"
                        });
                });

            modelBuilder.Entity("MovieAPI.Models.User", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserID"), 1L, 1);

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserID");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserID = 1,
                            UserName = "Morpheus"
                        },
                        new
                        {
                            UserID = 2,
                            UserName = "Neo"
                        });
                });

            modelBuilder.Entity("MovieAPI.Models.WatchList", b =>
                {
                    b.Property<int>("WatchListID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WatchListID"), 1L, 1);

                    b.Property<int>("UserRefId")
                        .HasColumnType("int");

                    b.HasKey("WatchListID");

                    b.HasIndex("UserRefId")
                        .IsUnique();

                    b.ToTable("WatchLists");

                    b.HasData(
                        new
                        {
                            WatchListID = 1,
                            UserRefId = 1
                        },
                        new
                        {
                            WatchListID = 2,
                            UserRefId = 2
                        });
                });

            modelBuilder.Entity("MovieAPI.Models.WatchMovie", b =>
                {
                    b.Property<int>("WatchListId")
                        .HasColumnType("int");

                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastDateOffered")
                        .HasColumnType("datetime2");

                    b.HasKey("WatchListId", "MovieId");

                    b.HasIndex("MovieId");

                    b.ToTable("WatchMovie");

                    b.HasData(
                        new
                        {
                            WatchListId = 1,
                            MovieId = 1,
                            LastDateOffered = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            WatchListId = 1,
                            MovieId = 2,
                            LastDateOffered = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            WatchListId = 2,
                            MovieId = 2,
                            LastDateOffered = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("MovieAPI.Models.WatchList", b =>
                {
                    b.HasOne("MovieAPI.Models.User", "User")
                        .WithOne("WatchList")
                        .HasForeignKey("MovieAPI.Models.WatchList", "UserRefId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MovieAPI.Models.WatchMovie", b =>
                {
                    b.HasOne("MovieAPI.Models.Movie", "Movie")
                        .WithMany("WatchMovies")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MovieAPI.Models.WatchList", "WatchList")
                        .WithMany("WatchMovies")
                        .HasForeignKey("WatchListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");

                    b.Navigation("WatchList");
                });

            modelBuilder.Entity("MovieAPI.Models.Movie", b =>
                {
                    b.Navigation("WatchMovies");
                });

            modelBuilder.Entity("MovieAPI.Models.User", b =>
                {
                    b.Navigation("WatchList")
                        .IsRequired();
                });

            modelBuilder.Entity("MovieAPI.Models.WatchList", b =>
                {
                    b.Navigation("WatchMovies");
                });
#pragma warning restore 612, 618
        }
    }
}
